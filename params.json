{
  "name": "Android Speech",
  "tagline": "Android speech recognition and text to speech made easy",
  "body": "[![Build Status](https://travis-ci.org/gotev/android-speech.svg?branch=master)](https://travis-ci.org/gotev/android-speech) [ ![Download](https://api.bintray.com/packages/gotev/maven/android-speech/images/download.svg) ](https://bintray.com/gotev/maven/android-speech/_latestVersion)\r\n\r\n## Setup\r\n### Gradle\r\n```\r\ndependencies {\r\n    compile 'net.gotev:speech:1.1.1'\r\n}\r\n```\r\n### Maven\r\n```\r\n<dependency>\r\n  <groupId>net.gotev</groupId>\r\n  <artifactId>speech</artifactId>\r\n  <version>1.1.1</version>\r\n  <type>aar</type>\r\n</dependency>\r\n```\r\n\r\n## Initialization\r\nTo start using the library, you have to initialize it in your [Application subclass](http://developer.android.com/reference/android/app/Application.html):\r\n```java\r\npublic class Initializer extends Application {\r\n\r\n    @Override\r\n    public void onCreate() {\r\n        super.onCreate();\r\n\r\n        Speech.init(this);\r\n    }\r\n}\r\n```\r\n\r\n## Logging\r\nBy default the library logging is disabled. You can enable debug log by invoking:\r\n```java\r\nLogger.setLogLevel(LogLevel.DEBUG);\r\n```\r\nwherever you want in your code. You can adjust the level of detail from DEBUG to OFF.\r\n\r\nThe library logger uses `android.util.Log` by default, so you will get the output in `LogCat`. If you want to redirect logs to different output or use a different logger, you can provide your own delegate implementation like this:\r\n```java\r\nLogger.setLoggerDelegate(new Logger.LoggerDelegate() {\r\n    @Override\r\n    public void error(String tag, String message) {\r\n        //your own implementation here\r\n    }\r\n\r\n    @Override\r\n    public void error(String tag, String message, Throwable exception) {\r\n        //your own implementation here\r\n    }\r\n\r\n    @Override\r\n    public void debug(String tag, String message) {\r\n        //your own implementation here\r\n    }\r\n\r\n    @Override\r\n    public void info(String tag, String message) {\r\n        //your own implementation here\r\n    }\r\n});\r\n```\r\n\r\n## Example\r\nYou can find a fully working demo app which uses this library in the `examples` directory. Just checkout the project and give it a try.\r\n\r\n## Usage\r\n### Speech recognition\r\nInside an activity:\r\n```java\r\ntry {\r\n    // you must have android.permission.RECORD_AUDIO granted at this point\r\n    Speech.getInstance().startListening(new SpeechDelegate() {\r\n        @Override\r\n        public void onStartOfSpeech() {\r\n            Log.i(\"speech\", \"speech recognition is now active\");\r\n        }\r\n\r\n        @Override\r\n        public void onSpeechRmsChanged(float value) {\r\n            Log.d(\"speech\", \"rms is now: \" + value);\r\n        }\r\n\r\n        @Override\r\n        public void onSpeechPartialResults(List<String> results) {\r\n            StringBuilder str = new StringBuilder();\r\n            for (String res : results) {\r\n                str.append(res).append(\" \");\r\n            }\r\n\r\n            Log.i(\"speech\", \"partial result: \" + str.toString().trim());\r\n        }\r\n\r\n        @Override\r\n        public void onSpeechResult(String result) {\r\n            Log.i(\"speech\", \"result: \" + result);\r\n        }\r\n    });\r\n} catch (SpeechRecognitionNotAvailable exc) {\r\n    Log.e(\"speech\", \"Speech recognition is not available on this device!\");\r\n    // You can prompt the user if he wants to install Google App to have\r\n    // speech recognition, and then you can simply call:\r\n    //\r\n    // SpeechUtil.redirectUserToGoogleAppOnPlayStore(this);\r\n    //\r\n    // to redirect the user to the Google App page on Play Store\r\n}\r\n```\r\n\r\n### Display progress animation\r\nAdd this to your layout:\r\n```xml\r\n<LinearLayout\r\n    android:orientation=\"vertical\"\r\n    android:layout_width=\"wrap_content\"\r\n    android:layout_height=\"wrap_content\"\r\n    android:id=\"@+id/linearLayout\">\r\n\r\n    <net.gotev.speech.ui.SpeechProgressView\r\n        android:id=\"@+id/progress\"\r\n        android:layout_width=\"120dp\"\r\n        android:layout_height=\"150dp\"/>\r\n\r\n</LinearLayout>\r\n```\r\nIt's important that the `SpeechProgressView` is always inside a LinearLayout to function properly. You can adjust width and height accordingly to the bar height settings (see below).\r\n\r\nthen, when you start speech recognition, pass also the `SpeechProgressView`:\r\n\r\n```java\r\nSpeech.getInstance().startListening(speechProgressView, speechDelegate);\r\n```\r\n\r\n#### Set custom bar colors\r\nYou can set all the 5 bar colors as you wish. This is just an example:\r\n```java\r\nint[] colors = {\r\n        ContextCompat.getColor(this, android.R.color.black),\r\n        ContextCompat.getColor(this, android.R.color.darker_gray),\r\n        ContextCompat.getColor(this, android.R.color.black),\r\n        ContextCompat.getColor(this, android.R.color.holo_orange_dark),\r\n        ContextCompat.getColor(this, android.R.color.holo_red_dark)\r\n};\r\nspeechProgressView.setColors(colors);\r\n```\r\n\r\n#### Set custom maximum bar height\r\n```java\r\nint[] heights = {60, 76, 58, 80, 55};\r\nspeechProgressView.setBarMaxHeightsInDp(heights);\r\n```\r\n\r\n### Text to speech\r\nInside an activity:\r\n```java\r\nSpeech.getInstance().say(\"say something\");\r\n```\r\n\r\nYou can also provide a callback to receive status:\r\n```java\r\nSpeech.getInstance().say(\"say something\", new TextToSpeechCallback() {\r\n    @Override\r\n    public void onStart() {\r\n        Log.i(\"speech\", \"speech started\");\r\n    }\r\n\r\n    @Override\r\n    public void onCompleted() {\r\n        Log.i(\"speech\", \"speech completed\");\r\n    }\r\n\r\n    @Override\r\n    public void onError() {\r\n        Log.i(\"speech\", \"speech error\");\r\n    }\r\n});\r\n```\r\n\r\n## Configuration\r\nYou can configure various parameters by using the setter methods on the speech instance, which you can get like this anywhere in your code:\r\n```java\r\nSpeech.getInstance()\r\n```\r\nRefer to JavaDocs for a complete reference.\r\n\r\n## Credits\r\nThanks to @zagum for the original implementation of the [speech recognition view](https://github.com/zagum/SpeechRecognitionView).\r\n\r\n## License\r\n\r\n    Copyright (C) 2016 Aleksandar Gotev\r\n\r\n    Licensed under the Apache License, Version 2.0 (the \"License\");\r\n    you may not use this file except in compliance with the License.\r\n    You may obtain a copy of the License at\r\n\r\n       http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    Unless required by applicable law or agreed to in writing, software\r\n    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    See the License for the specific language governing permissions and\r\n    limitations under the License.\r\n\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}